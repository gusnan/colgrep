#!/usr/bin/env python

'''
colgrep does just one thing: color a pattern in a data stream

for usage, run ``colgrep -h``
'''
import sys
import re
import argparse

colors = {
	'yellow': '\033[0;33m',
	'blue': '\033[0;34m',
	'red': '\033[0;31m',
	'green': '\033[0;32m'
}
default_color = 'green'
reset = '\033[0m'

def help_colors():
	'''
	help text of available color names
	'''
	color_list = ", ".join(map((lambda color: (color, color + " (default)")[color is default_color]), sorted(colors.keys())))
	return "highlighting color: %s" % color_list

def colorize(args):
	'''
	create a regular expression of all search pattern and replace every pattern
	surounded by ansi-color directives in every line.
	'''
	color = colors.get(args.color, colors.get(default_color))
	exp = re.compile("(" + "|".join(args.pattern) + ")")
	for line in sys.stdin.readlines():
		out = exp.sub(color + "\g<1>" + reset, line)
		sys.stdout.write(out)

class ColgrepArgumentParser(argparse.ArgumentParser):
	'''
	overriding 'error' method in order to display the help message if colgrep is
	called without arguments
	'''
	def error(self, message):
		# sys.stderr.write('error: %sn' % message)
		self.print_help()
		sys.exit(2)

def main():
	parser = ColgrepArgumentParser(description="to always recognize what's important!")
	parser.add_argument('pattern', nargs='+', metavar='PATTERN', help='pattern to be highlighted')
	parser.add_argument('-c', dest='color', help=help_colors())
	args = parser.parse_args()
	colorize(args)

if __name__ == '__main__':
	main()
